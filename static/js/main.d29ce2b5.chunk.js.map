{"version":3,"sources":["Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/InsertionSort.js","SortingVisualiser/SortingVisualiser.js","Algorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["mergeSortAnimations","arr","animations","auxArray","slice","mergeSort","start","end","mid","Math","floor","i","j","k","push","merge","length","quickSortAnimations","quickSort","p","random","swap","pivot","partition","temp","SortingVisualiser","props","state","arrSize","sorting","algo","resetArray","bind","sort","setArraySize","setAlgo","changeSortingState","this","size","setState","console","log","value","newSorting","minIndex","selectionSortAnimations","insertionSortAnimations","arrBars","document","getElementsByClassName","actionType","b1","b2","color","setTimeout","style","backgroundColor","height","className","id","ButtonToolbar","aria-label","ToggleButtonGroup","type","name","defaultValue","toggle","Button","variant","disabled","ToggleButton","onClick","ButtonGroup","map","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d29ce2b5.chunk.js","sourcesContent":["export function mergeSortAnimations(arr){\r\n    const animations = [];\r\n    const auxArray = arr.slice();\r\n    mergeSort(arr, 0, arr.length - 1, auxArray, animations);\r\n    return animations;\r\n}\r\nfunction mergeSort(arr, start, end, auxArray, animations){\r\n    if (start === end) return;\r\n    let mid = Math.floor((end + start) / 2);\r\n    mergeSort(auxArray, start, mid, arr, animations);\r\n    mergeSort(auxArray, mid + 1, end, arr, animations);\r\n    merge(arr, start, mid, end, auxArray, animations);\r\n}\r\nfunction merge(arr, start, mid, end, auxArray, animations){\r\n    let i = start;\r\n    let j = mid + 1;\r\n    let k = start;\r\n    while(i <= mid && j <= end){\r\n        animations.push([i, j, 0]);\r\n        animations.push([i, j, 1]);\r\n\r\n        if (auxArray[i] <= auxArray[j]){\r\n            animations.push([k, auxArray[i], 2]);\r\n            arr[k] = auxArray[i];\r\n            k++;\r\n            i++;\r\n        }\r\n        else{\r\n            animations.push([k, auxArray[j], 2]);\r\n            arr[k] = auxArray[j];\r\n            k++;\r\n            j++;\r\n        }\r\n    }\r\n    while(i<= mid){\r\n        animations.push([i, i, 0]);\r\n        animations.push([i, i, 1]);\r\n        animations.push([k, auxArray[i], 2]);\r\n        arr[k] = auxArray[i];\r\n        k++;\r\n        i++;\r\n    }\r\n    while(j<= end){\r\n        animations.push([j,j, 1]);\r\n        animations.push([j,j, 1]);\r\n        animations.push([k, auxArray[j], 2]);\r\n        arr[k] = auxArray[j];\r\n        k++;\r\n        j++;\r\n    }\r\n}","export function quickSortAnimations(arr){\r\n    const animations = [];\r\n    quickSort(arr, 0, arr.length, animations);\r\n    return animations;\r\n}\r\nfunction quickSort(arr, start, end, animations){\r\n    if (start >= end) return;\r\n    let p = partition(arr, start, end, animations);\r\n    quickSort(arr, start, p, animations);\r\n    quickSort(arr, p + 1, end, animations);\r\n}\r\nfunction partition(arr, start, end, animations){\r\n    let k = Math.floor(Math.random() * (end - start)) + start;\r\n\r\n    animations.push([start, arr[k], 2]);\r\n    animations.push([k, arr[start], 2]);\r\n    swap(arr, start, k);\r\n\r\n    k = start;\r\n    let pivot = arr[k];\r\n    \r\n    animations.push([start, start, 0]);\r\n    for (let i = start + 1; i < end; i++){\r\n        animations.push([i,i, 0]);\r\n        animations.push([i,i, 1]);\r\n        if (arr[i] < pivot){\r\n            k += 1;\r\n            animations.push([i, arr[k], 2]);\r\n            animations.push([k, arr[i], 2]);\r\n            swap(arr, i, k);\r\n        }\r\n    }\r\n    \r\n    animations.push([start, start, 1]);\r\n\r\n    animations.push([start, arr[k], 2]);\r\n    animations.push([k, arr[start], 2]);\r\n    swap(arr, start, k);\r\n\r\n    return k;\r\n}\r\nfunction swap(arr, i, j){\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","export function insertionSortAnimations(arr){\r\n    const animations = [];\r\n    for (let i = 1; i < arr.length; i++){\r\n        for (let j = i - 1; j >= 0 && arr[j + 1] < arr[j]; j--){\r\n            animations.push([j + 1, j, 0]);\r\n            animations.push([j + 1, j, 1]);\r\n\r\n            animations.push([j, arr[j+1], 2]);\r\n            animations.push([j+1, arr[j], 2]);\r\n            swap(arr, j, j+1);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\nfunction swap(arr, i, j){\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport { mergeSortAnimations } from './../Algorithms/MergeSort';\r\nimport { selectionSortAnimations } from './../Algorithms/SelectionSort';\r\nimport { quickSortAnimations } from './../Algorithms/QuickSort';\r\nimport { insertionSortAnimations } from './../Algorithms/InsertionSort';\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nconst PRIMARY_COLOR = '#6d6875';\r\nconst SECONDARY_COLOR = '#ffcdb2';\r\nconst DEF_ARR_SIZE = 100;\r\nconst MAX_BAR_HEIGHT = 400;\r\nconst ANIMATION_SPEED = 2;\r\n\r\nconst MERGESORT = 1;\r\nconst SELECTIONSORT = 2;\r\nconst QUICKSORT = 3;\r\nconst INSERTIONSORT = 4;\r\n\r\n\r\nclass SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr: [],\r\n            arrSize: 100,\r\n            sorting: false,\r\n            algo: MERGESORT,\r\n        };\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.sort = this.sort.bind(this);\r\n        this.setArraySize = this.setArraySize.bind(this);\r\n        this.setAlgo = this.setAlgo.bind(this);\r\n        this.changeSortingState = this.changeSortingState.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n    setArraySize(size) {\r\n        this.setState({ ...this.state, arrSize: size }, () => this.resetArray());\r\n    }\r\n\r\n    resetArray() {\r\n        const arr = [];\r\n        console.log(this.state.arrSize);\r\n        for (let i = 0; i < this.state.arrSize; i++) {\r\n            arr.push(Math.floor(Math.random() * MAX_BAR_HEIGHT) + 5);\r\n        }\r\n        this.setState({ ...this.state, arr });\r\n    }\r\n    setAlgo(value){\r\n        this.setState({...this.state, algo: value});\r\n    }\r\n    changeSortingState(){\r\n        let newSorting = this.state.sorting;\r\n        this.setState({...this.state, sorting: !newSorting});\r\n    }\r\n    sort() {\r\n        if (this.state.sorting) return;\r\n        const algo = this.state.algo;\r\n        let animations = [];\r\n        if (algo === MERGESORT) animations = mergeSortAnimations(this.state.arr);\r\n        else if (algo === SELECTIONSORT) animations = selectionSortAnimations(this.state.arr);\r\n        else if (algo === QUICKSORT) animations = quickSortAnimations(this.state.arr);\r\n        else if (algo === INSERTIONSORT) animations = insertionSortAnimations(this.state.arr);\r\n        \r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrBars = document.getElementsByClassName('arr-bar');\r\n            const actionType = animations[i][2];\r\n            if (actionType !== 2) {\r\n                const [b1, b2, x] = animations[i];\r\n                const color = actionType === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    arrBars[b1].style.backgroundColor = color;\r\n                    arrBars[b2].style.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [b1, height, x] = animations[i];\r\n                    arrBars[b1].style.height = `${height}px`;\r\n                }, i * ANIMATION_SPEED)\r\n\r\n            }\r\n        }\r\n    }\r\n      \r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div id=\"wrapper\">\r\n                    <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                        <ToggleButtonGroup  type=\"radio\" name=\"algos\" defaultValue ={1} className=\"mr-2\" toggle = {true} aria-label=\"Second group\">\r\n                            <Button variant=\"dark\" disabled>Sorting Algorithm</Button>\r\n                            <ToggleButton variant=\"outline-dark\" value={1} onClick={() => this.setAlgo(1)}>Merge Sort</ToggleButton>\r\n                            <ToggleButton variant=\"outline-dark\" value={2} onClick={() => this.setAlgo(2)}>Selection Sort</ToggleButton>\r\n                            <ToggleButton variant=\"outline-dark\" value={3} onClick={() => this.setAlgo(3)}>Quick Sort</ToggleButton>\r\n                            <ToggleButton variant=\"outline-dark\" value={4} onClick={() => this.setAlgo(4)}>Insertion Sort</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                        <ToggleButtonGroup type=\"radio\" name=\"arraySize\" defaultValue ={1} className=\"mr-2\" aria-label=\"First group\">\r\n                            <Button variant=\"dark\" disabled>Array Size</Button>\r\n                            <ToggleButton variant=\"outline-dark\" value={1} onClick={() => this.setArraySize(100)}>100</ToggleButton>\r\n                            <ToggleButton variant=\"outline-dark\" value={2} onClick={() => this.setArraySize(150)}>150</ToggleButton>\r\n                            <ToggleButton variant=\"outline-dark\" value={3} onClick={() => this.setArraySize(200)}>200</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                        <ButtonGroup aria-label=\"Third group\">\r\n                            <Button variant=\"light\" onClick={() => this.sort()}>Sort</Button>\r\n                        </ButtonGroup>\r\n                    </ButtonToolbar>\r\n                </div>\r\n                <div className='arr-container'>\r\n                    {\r\n                        this.state.arr.map((value, i) => (\r\n                            <div\r\n                                className=\"arr-bar\"\r\n                                key={i}\r\n                                style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                }}></div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SortingVisualiser;","export function selectionSortAnimations(arr){\r\n    const animations = [];\r\n    for (let i = 0; i < arr.length; i++){\r\n        let minIndex = i;\r\n        for (let j = i+1; j< arr.length; j++){\r\n            animations.push([j,j,0]);\r\n            animations.push([j,j,1]);\r\n            if (arr[j] < arr[minIndex]){\r\n                minIndex = j;\r\n            } \r\n        }\r\n        animations.push([i, arr[minIndex], 2]);\r\n        animations.push([minIndex, arr[i], 2]);\r\n        let temp = arr[i];\r\n        arr[i] = arr[minIndex];\r\n        arr[minIndex]= temp;\r\n    }\r\n    return animations;\r\n}","import React from 'react';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <SortingVisualiser></SortingVisualiser>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Boostrap css\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}